# -*- coding: utf-8 -*-
"""heikin_ashi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LRo_ug_joHG9X5Yze4KifVtr1H9w5T8F
"""

!pip install --upgrade mplfinance yfinance
import pandas as pd
import yfinance as yf
import mplfinance as mpf
import matplotlib.pyplot as plt

ticker=yf.download('AUDEUR=X')
ticker=ticker.iloc[-300:]
mpf.plot(ticker,type='candle')

# calculate heiken-aski by definition
df_ha = ticker.copy()
for i in range(df_ha.shape[0]):
  if i > 0:
    df_ha.loc[df_ha.index[i],'Open'] = (ticker['Open'][i-1] + ticker['Close'][i-1])/2
  df_ha.loc[df_ha.index[i],'Close'] = (ticker['Open'][i] + ticker['Close'][i] + ticker['Low'][i] +  ticker['High'][i])/4
df_ha = df_ha.iloc[1:,:]

df_ha['High']=df_ha[['Open','Close','High']].max(axis=1)
df_ha['Low']=df_ha[['Open','Close','Low']].min(axis=1)
plt.figure(figsize=(21,9))
mpf.plot(df_ha.iloc[-100:],type='candle',ax=plt.gca())

df_ha['green']=df_ha['Close']>df_ha['Open']

df_ha_extended=pd.concat([df_ha,
                          df_ha.shift(1).add_prefix('Previous_')],axis=1)

#df_ha_extended['allocation']=np.nan

current_allocation=0
import numpy as np
current_sl_long=np.nan
current_sl_short=np.nan
for _,r in df_ha_extended.iterrows():
  # start a new long position
  if r['Previous_green'] and current_allocation!=1:
    df_ha_extended.loc[_,'allocation']=1
    current_allocation=1
    current_sl_long=r['Previous_Low']
  # trigger stop loss
  if current_allocation==1 and r['Low']<current_sl_long:
    df_ha_extended.loc[_,'allocation']=0
    current_allocation=0
  # start a new short position
  if (not r['Previous_green']) and current_allocation!=-1:
    df_ha_extended.loc[_,'allocation']=-1
    current_allocation=-1
    current_sl_long=r['Previous_High']
  # trigger stop loss
  if current_allocation==-1 and r['High']>current_sl_short:
    df_ha_extended.loc[_,'allocation']=0
    current_allocation=0



df_ha_extended.allocation.ffill().plot(figsize=(21,9),alpha=0.2)
plt.yticks(ticks=[-1,0,1],labels=['short','cash','long'])
ticker.Close.plot(ax=plt.gca().twinx())

df_ha_extended['Ret']=(df_ha_extended.Close.shift(-1)/df_ha_extended.Close)
df_ha_extended['logRet']=np.log(df_ha_extended.Ret)
df_ha_extended['allocation'].ffill().value_counts()
np.exp(np.cumsum(df_ha_extended['logRet'])).plot(label='Long',figsize=(10,3))
np.exp(np.cumsum(df_ha_extended['logRet']*df_ha_extended['allocation'].ffill().bfill())).plot(lw=2.2,label='HA')
plt.legend()

df_ha_extended['Ret']=(df_ha_extended.Close/df_ha_extended.Close.shift(1))
df_ha_extended['logRet']=np.log(df_ha_extended.Ret)
df_ha_extended['allocation'].ffill().value_counts()
np.exp(np.cumsum(df_ha_extended['logRet'])).plot(label='Long',figsize=(10,3))
np.exp(np.cumsum(df_ha_extended['logRet']*df_ha_extended['allocation'].ffill().bfill())).plot(lw=2.2,label='HA (future)')
plt.legend()